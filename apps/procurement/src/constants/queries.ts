export const CREATE_PR_CODE_SEQ = `CREATE TABLE IF NOT EXISTS public.util_pr_code_seq (curr_year integer NOT NULL, curr_val BIGINT NOT NULL);`;

export const PR_CODE_INIT_DATA = `DO $$ DECLARE curr_row_count INTEGER; BEGIN SELECT COUNT(*) INTO curr_row_count FROM util_pr_code_seq; IF curr_row_count = 0 THEN INSERT INTO util_pr_code_seq (curr_year, curr_val) VALUES (date_part('year', CURRENT_DATE), 0); END IF; END; $$;`;

export const GENERATE_PR_CODE = `CREATE OR REPLACE FUNCTION gen_pr_code() RETURNS VARCHAR LANGUAGE plpgsql AS $$ DECLARE val_in_seq BIGINT; DECLARE year_in_seq INTEGER; DECLARE year_now INTEGER; DECLARE pr_code VARCHAR; BEGIN year_now = (date_part('year', CURRENT_DATE)); year_in_seq = (SELECT curr_year FROM public.util_pr_code_seq); IF year_now <> year_in_seq THEN UPDATE PUBLIC.util_pr_code_seq SET curr_val = 1, curr_year = year_now; pr_code = (SELECT code_gen('PR', (SELECT get_month()), year_now, 1)); ELSE UPDATE PUBLIC.util_pr_code_seq SET curr_val = curr_val + 1; SELECT curr_val INTO val_in_seq FROM public.util_pr_code_seq; SELECT curr_year INTO year_in_seq FROM public.util_pr_code_seq; pr_code = (SELECT code_gen('PR', (SELECT get_month()), year_now, val_in_seq)); END IF; RETURN pr_code; END; $$;`;

export const CODE_GEN = `CREATE OR REPLACE FUNCTION code_gen(prefix VARCHAR, curr_month VARCHAR, curr_year INTEGER, curr_seq BIGINT) RETURNS VARCHAR LANGUAGE sql AS $$ SELECT CONCAT(prefix, '-', curr_month, '-', curr_year, '-', curr_seq); $$;`;

export const GET_MONTH = `CREATE OR REPLACE FUNCTION get_month() RETURNS VARCHAR LANGUAGE plpgsql AS $$ DECLARE month_now DOUBLE PRECISION; DECLARE month_name VARCHAR; BEGIN month_now = date_part('month', CURRENT_DATE); IF month_now = 1 THEN month_name = 'JAN'; ELSIF month_now = 2 THEN month_name = 'FEB'; ELSIF month_now = 3 THEN month_name = 'MAR'; ELSIF month_now = 4 THEN month_name = 'APR'; ELSIF month_now = 5 THEN month_name = 'MAY'; ELSIF month_now = 6 THEN month_name = 'JUN'; ELSIF month_now = 7 THEN month_name = 'JUL'; ELSIF month_now = 8 THEN month_name = 'AUG'; ELSIF month_now = 9 THEN month_name = 'SEP'; ELSIF month_now = 10 THEN month_name = 'OCT'; ELSIF month_now = 11 THEN month_name = 'NOV'; ELSIF month_now = 12 THEN month_name = 'DEC'; ELSE month_name = 'Month is invalid'; END IF; RETURN month_name; END; $$;`;

export const RESET_VAL = `CREATE OR REPLACE FUNCTION dev_pr_reset_val() RETURNS TABLE(current_year INTEGER, current_value BIGINT) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY UPDATE util_pr_code_seq SET curr_val = 1, curr_year = date_part('year', CURRENT_DATE) RETURNING *; END; $$;`;

export const NEXT_VAL = `CREATE OR REPLACE FUNCTION dev_pr_next_val() RETURNS TABLE(current_year INTEGER, current_value BIGINT) LANGUAGE plpgsql AS $$ DECLARE val_in_seq BIGINT; BEGIN val_in_seq = (SELECT curr_val FROM PUBLIC.util_pr_code_seq); RETURN QUERY UPDATE util_pr_code_seq SET curr_val = val_in_seq + 1 RETURNING *; END; $$;`;

export const GET_VAL = `CREATE OR REPLACE FUNCTION dev_pr_get_val() RETURNS TABLE(current_year INTEGER, current_value BIGINT) LANGUAGE sql AS $$ SELECT * FROM PUBLIC.util_pr_code_seq; $$;`;
